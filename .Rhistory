column_name[grep("LI*", column_name,perl=TRUE)]
column_name[grep("LI\\b", column_name,perl=TRUE)]
column_name[grep("LI\\b", column_name)]
column_name[grep("LI\\b", column_name), value = FALSE]
column_name[grep("LI\\b", column_name, value=FALSE)]
column_name[grep("LI\\b", column_name)]
column_name[grep("^LI", column_name)]
column_name[grep("^LI+", column_name)]
column_name[grep("*", column_name)]
column_name[grep("^IL", column_name)]
column_name<-colnames(training)
column_name[grep("^IL", column_name)]
column_name[grep("^IL", column_name)]
column_name<-colnames(training)
column_name[grep("^IL", column_name)]
install.package("KernSmooth")
install.packages("KernSmooth")
load(KernSmooth)
library("KernSmooth")
library(datasets)
data(cars)
with(cars, plot(speed,dist))
xyplot(speed~dist,data=cars, layout = c(4,1))
library(lattice)
head(cars)
library(lattice)
xyplot(speed~dist,data=cars, layout = c(4,1))
xyplot(speed~dist,data=cars)
xyplot(dist~speed,data=cars)
qplot(speed,dist,data=cars)
library(ggplot2)
qplot(speed,dist,data=cars)
?square
??square
?sq
??square root
??"square root"
?Load
?load
install.packages(rmarkdown)
install.packages(knitr)
install.packages("RMark")
install.packages("knitr")
?barplot
??limma
install.packages("limma")
library("VennDiagram")
install.packages("VennDiagram")
library("VennDiagram")
require(VennDiagram)
grid.newpage()
venn.plot <- draw.pairwise.venn(100, 70, 30, c("First", "Second"))
grid.draw(venn.plot)
??limma
install.packages("limma")
?VennDiagram
??VennDiagram
venn.plot <- venn.diagram()
a <- c("1","2","3a","4a")
b <- c("2","3a")
c <- c("1", "2", "4a")
l <- list(a,b,c)
venn.plot <- venn.diagram(x = l)
venn.plot <- venn.diagram(x = l,"test.tiff")
grid.newpage()
venn.plot <- venn.diagram(x = l,"test.tiff")
venn.plot <- venn.diagram(x = list(a,b,c),"test.tiff")
venn.plot <- venn.diagram(x = list(a,b,c),"test.tiff"col = "transparent",
fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
venn.diagram 21
label.col = c("orange", "white", "darkorchid4", "white",
"white", "white", "white", "white", "darkblue", "white",
"white", "white", "white", "darkgreen", "white"),
cex = 1.5,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
cat.cex = 1.5,
cat.pos = 0,
cat.dist = 0.07,
cat.fontfamily = "serif",
rotation.degree = 270,
margin = 0.2)
venn.plot <- venn.diagram(x = list(a,b,c),"test.tiff"col = "transparent",
fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
label.col = c("orange", "white", "darkorchid4", "white",
"white", "white", "white", "white", "darkblue", "white",
"white", "white", "white", "darkgreen", "white"),
cex = 1.5,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
cat.cex = 1.5,
cat.pos = 0,
cat.dist = 0.07,
cat.fontfamily = "serif",
rotation.degree = 270,
margin = 0.2)
);
A <- sample(1:1000, 400, replace = FALSE);B <- sample(1:1000, 600, replace = FALSE);C <- sample(1:1000, 350, replace = FALSE);D <- sample(1:1000, 550, replace = FALSE);E <- sample(1:1000, 375, replace = FALSE);venn.plot <- venn.diagram(  x = list(    A = A,    B = B,    C = C,    D = D,    E=E  ),  filename = "Venn_5set_pretty.tiff", col = "black",  fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),  alpha = 0.50,  cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,          1, 0.8, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),  cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),  cat.cex = 1.5,  cat.fontface = "bold",  margin = 0.05);
A <- sample(1:1000, 400, replace = FALSE);B <- sample(1:1000, 600, replace = FALSE);C <- sample(1:1000, 350, replace = FALSE);D <- sample(1:1000, 550, replace = FALSE);E <- sample(1:1000, 375, replace = FALSE);
A <- sample(1:1000, 400, replace = FALSE);
B <- sample(1:1000, 600, replace = FALSE);
C <- sample(1:1000, 350, replace = FALSE);
D <- sample(1:1000, 550, replace = FALSE);
E <- sample(1:1000, 375, replace = FALSE);
venn.plot <- venn.diagram(
x = list(
A = A,
B = B,
C = C,
D = D,
E=E
),
filename = "Venn_5set_pretty.tiff", col = "black",
fill = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
alpha = 0.50,
cex = c(1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,
1, 0.8, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5),
cat.col = c("dodgerblue", "goldenrod1", "darkorange1", "seagreen3", "orchid3"),
cat.cex = 1.5,
cat.fontface = "bold",
margin = 0.05
);
grid.draw(venn.plot)
grid.newpage()
grid.draw(venn.plot)
?uninstall
??uninstall
unique(c(a,b,c))
universe <- sort(unique(c(a,b,c)))
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
biocLite("limma")
source('~/Documents/R workspace/Venn Diagram/Venn Diagram.R', echo=TRUE)
Venn3(a,b,c, c("a","b","c"))
library(vennDiagram)
?vennDiagram
??vennDiagram
library(VennDiagram)
Venn3(a,b,c, c("a","b","c"))
require(VennDiagram)
vennDiagram( vennCounts(Counts) )
VennDiagram( vennCounts(Counts) )
vennDiagram( vennCounts(Counts) )
plot.venn.diagram( vennCounts(Counts) )
ls()
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
ls()
source("http://bioconductor.org/biocLite.R")
ls()
Venn3(a,b,c, c("a","b","c"))
plot.venn.diagram( vennCounts(Counts) )
venn.diagram( vennCounts(Counts) )
Venn3(a,b,c, c("a","b","c"))
Venn3 <- function(set1, set2, set3, names)
{
stopifnot( length(names) == 3)
# Form universe as union of all three sets
universe <- sort( unique( c(set1, set2, set3) ) )
Counts <- matrix(0, nrow=length(universe), ncol=3)
colnames(Counts) <- names
for (i in 1:length(universe))
{
Counts[i,1] <- universe[i] %in% set1
Counts[i,2] <- universe[i] %in% set2
Counts[i,3] <- universe[i] %in% set3
}
venn.diagram( vennCounts(Counts) )
}
Venn3(a,b,c, c("a","b","c"))
biocLite("limma")
vennCounts
library(limma)
l <- cbind(a,b,c)
remove(l)
l <- cbind(a,b,c)
hsb2 <- read.csv("http://www.ats.ucla.edu/stat/data/hsb2.csv")
attach(hsb2)
hw <- (write >= 60)
hm <- (math >= 60)
hr <- (read >= 60)
c3 <- cbind(hw, hm, hr)
a <- vennCounts(c3)
View(`c3`)
Venn3(a,b,c, c("a","b","c"))
vennDiagram(a, include = "both",
names = c("High Writing", "High Math", "High Reading"),
cex = 1, counts.col = "red")
a
remove(a)
a
a <- c("a","b","c","d","e")
b <- c("b", "d", "e", "f", "g")
c <- c("e", "g", "h", "l
a <- c("a","b","c","d","e")
b <- c("b", "d", "e", "f", "g")
c <- c("e", "g", "h", "l")
Venn3(a,b,c, c("a","b","c"))
a
Venn3(a,b,c, c("a","b","c"))
universe <- sort( unique( c(a, b, c) ) )
Counts <- matrix(0, nrow=length(universe), ncol=3)
colnames(Counts) <- names
names
colnames(Counts) <- names(c("a","b","c"))
Counts
colnames(Counts) <- c("a","b","c")
Counts
for (i in 1:length(universe))
{
Counts[i,1] <- universe[i] %in% a
Counts[i,2] <- universe[i] %in% b
Counts[i,3] <- universe[i] %in% c
}
venn.diagram( vennCounts(Counts) )
venn.diagram( vennCounts(Counts) )
vennCounts(Counts)
venn.diagram( vc)
vc <- vennCounts(Counts)
venn.diagram( vc)
vennDiagram(vc, include = "both",
names = c("High Writing", "High Math", "High Reading"),
cex = 1, counts.col = "red")
vennDiagram(vc, include = "both",
names = c("a", "b"", "c""),
cex = 1, counts.col = "red")
vennDiagram(vc, include = "both",
names = c("a", "b", "c"),
cex = 1, counts.col = "red")
install.packages("sqldf")
head(hsb2)
vc <- vennCounts(Counts)
Venn3 <- function(a, b, c, names)
{
stopifnot( length(names) == 3)
# Form universe as union of all three sets
universe <- sort( unique( c(a, b, c) ) )
Counts <- matrix(0, nrow=length(universe), ncol=3)
colnames(Counts) <- c("a","b","c")
for (i in 1:length(universe))
{
Counts[i,1] <- universe[i] %in% a
Counts[i,2] <- universe[i] %in% b
Counts[i,3] <- universe[i] %in% c
}
vc <- vennCounts(Counts)
vennDiagram(vc, include = "both",
names = c("a", "b", "c"),
cex = 1, counts.col = "red")
}
a <- c("a","b","c","d","e")
b <- c("b", "d", "e", "f", "g")
c <- c("e", "g", "h", "l")
Venn3(a,b,c, c("a","b","c"))
?vennDiagram
Venn3 <- function(a, b, c, names)
{
stopifnot( length(names) == 3)
# Form universe as union of all three sets
universe <- sort( unique( c(a, b, c) ) )
Counts <- matrix(0, nrow=length(universe), ncol=3)
colnames(Counts) <- names
for (i in 1:length(universe))
{
Counts[i,1] <- universe[i] %in% a
Counts[i,2] <- universe[i] %in% b
Counts[i,3] <- universe[i] %in% c
}
vc <- vennCounts(Counts)
vennDiagram(vc, include = "both",
names = c("a", "b", "c"),
cex = 1, counts.col = "red", circle.col = c(131,7,142))
}
Venn3(a,b,c, c("a","b","c"))
?vennDiagram
sqldf("select top 10 * from hsb2")
library(sqldfk)
library(sqldf)
install.packages("sqldf")
library("sqldf")
library("sqldf")
install.packages("gsubfn")
install.packages("gsubfn")
install.packages("sqldf")
library("sqldf")
install.packages("sqldf")
install.packages("http://cran.r-project.org/src/contrib/sqldf_0.4-7.1.tar.gz")
install.packages("sqldf")
install.packages("http://cran.r-project.org/src/contrib/gsubfn_0.6-6.tar.gz")
install.packages("caret")
library(caret)
library(sqldf)
install.packages("gsubfn")
install.packages("sqldf")
universe <- sort( unique( c(a, b, c) ) )
Counts <- matrix(0, nrow=length(universe), ncol=3)
colnames(Counts) <- names
for (i in 1:length(universe))
{
Counts[i,1] <- universe[i] %in% a
Counts[i,2] <- universe[i] %in% b
Counts[i,3] <- universe[i] %in% c
}
vc <- vennCounts(Counts)
vennDiagram(vc, include = "both",
names = c("a", "b", "c"),
cex = 1, counts.col = "red", circle.col = c(131,7,142))
vc
install.packages("sqldf")
install.packages("http://cran.r-project.org/src/contrib/gsubfn_0.6-6.tar.gz")
install.packages('gsubfn')
help()
version()
help.version()
install.packages('gsubfn')
install.packages("sqldf")
install.packages("dplyr")
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
submit()
students3
?gather
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
?mutate
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(failed, passed)
rbind_list(passed, failed)
sat
?separate
submit()
submit()
submit()
swirl()
Sys.getlocal("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("1920012")
ymd("192012")
ymd("192-01-2")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8 , minutes = 32, seconds = 55)
update(this_moment, hours = 8 , minutes = 34, seconds = 55)
this_moment
bedsheet
update(this_moment, now())
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asize/Hong_Kong")
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
0
activity <- read.csv('activity.csv')
setwd("~/Documents/Coursera/Coursera - Data Specialization Track/4 Reproducible Research/Assignment 1/RepData_PeerAssessment1")
activity <- read.csv('activity.csv')
grpbyday <- aggregate(steps ~ date, data = activity[which(!is.na(activity$steps)),], sum)
hist(grpbyday$steps)
mean(grpbyday$steps)
median(grpbyday$steps)
?scipen
?sci
??scipen
options("scipen" = 100)
head(activity)
grpbyinterval <- aggregate(steps ~ interval, data = activity[which(!is.na(activity$steps)),], mean)
library(ggplot2)
?ggplot2
?qplot
head(grpbyinterval)
qplot(x = interval, y = steps, data = grpbyinterval, geom = "l")
qplot(x = interval, y = steps, data = grpbyinterval, geom = "line")
qplot(x = interval, y = steps, data = grpbyinterval, geom = "line", main="Average daily activity pattern", xlab = "Interval", ylab = "Average number of steps taken")
max(grpbyinterval$steps)
which(grypbyinterval$steps = max(grpbyinterval$steps))
which(grypbyinterval$steps == max(grpbyinterval$steps))
which(grpbyinterval$steps == max(grpbyinterval$steps)))
which(grpbyinterval$steps = max(grpbyinterval$steps)))
grpbyinterval[grpbyinterval$steps = max(grpbyinterval$steps)]
grpbyinterval[grpbyinterval$steps = max(grpbyinterval$steps),]
grpbyinterval[grpbyinterval$steps == max(grpbyinterval$steps),]
grpbyinterval$interval[grpbyinterval$steps == max(grpbyinterval$steps)]
is.na(activity$steps)
length(is.na(activity$steps))
new_data <- activity
new_data(is.na(new_data$steps))
new_data[is.na(new_data$steps),]
NArecords <- is.na(new_data$steps)
head(NArecords)
NArecords <- which(is.na(new_data$steps))
head(NArecords)
head(NArecords,100)
head(NArecords,500)
length(NArecords)
new_data$date[1]
grpbyday$steps[grpbyday$date = new_data$date[1]]
grpbyday$steps[grpbyday$date = new_data$date[1],]
grpbyday$steps[grpbyday$date == new_data$date[1],]
grpbyday$steps[grpbyday$date == new_data$date[1]]
new_data$date[1]
grpbyday
activity[activity$date = "2012-10-01"]
activity[activity$date == "2012-10-01",]
grpbyinterval$steps[grpbyday$date == new_data$date[1]]
grpbyinterval$steps[grpbyinterval$date == new_data$date[1]]
grpbyinterval$steps[grpbyinterval$interval == new_data$interval[1]]
tail(activity)
tail(activity,200)
activity[which(!is.na(activity$steps)),]
round(grpbyinterval$steps[grpbyinterval$interval == new_data$interval[1]])
?round
for (i in NArecords) {
new_data$steps[i] <- round(grpbyinterval$steps[grpbyinterval$interval == new_data$interval[i]])
}
is.na(new_data$steps)
which(is.na(new_data$steps))
new_grpbyday <- aggregate(steps ~ date, data = new_data, sum)
hist(new_grpbyday$steps)
new_data$date[1]
weekdays(new_data$date[1])
?weekdays
weekdays(ymd(new_data$date[1]))
library(lubridate)
weekdays(ymd(new_data$date[1]))
new_data$weekday <- ifelse(weekdays(ymd(new_data$date) %in% ("Saturday", "Sunday"), "Weekend","Weekday")
new_data$weekday <- ifelse(weekdays(ymd(new_data$date) %in% c("Saturday", "Sunday"), "Weekend","Weekday")
new_data$weekday <- ifelse(weekdays(ymd(new_data$date) %in% c("Saturday", "Sunday"), "Weekend","Weekday"))
new_data$weekday <- ifelse(weekdays(ymd(new_data$date) %in% c("Saturday", "Sunday"), "Weekend","Weekday"))
new_data$weekday <- ifelse(weekdays(ymd(new_data$date)) %in% c("Saturday", "Sunday"), "Weekend","Weekday")
head(new_data)
head(new_data.300)
head(new_data,300)
table(new_data$weekday)
str(new_data)
new_data$weekday <- as.factor(ifelse(weekdays(ymd(new_data$date)) %in% c("Saturday", "Sunday"), "Weekend","Weekday"))
str(new_data)
new_grpbyinterval_weekday <- aggregate(steps ~ interval, weekday, data = new_data, sum)
new_grpbyinterval_weekday <- aggregate(steps ~ interval + weekday, data = new_data, sum)
head(new_grpbyinterval_weekday)
?qplot
qplot(x = interval, y = steps, data = new_grpbyinterval_weekday, facets = . ~ weekday , geom = "line", main="Average daily activity pattern", xlab = "Interval", ylab = "Average number of steps taken")
qplot(x = interval, y = steps, data = new_grpbyinterval_weekday, facets = weekday ~ . , geom = "line", main="Average daily activity pattern", xlab = "Interval", ylab = "Average number of steps taken")
